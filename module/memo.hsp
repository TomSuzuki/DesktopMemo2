
// メモのウィンドウを制御するためのモジュールです。

#module modMemo fname,x,y,w,h,col,memo,wid,hMesbox,boxid,hBrush,btnid,btnid_pin,btnid_col,btnid_del,isPin,btnid_add,col_theme,col_text,col_bk
#uselib "user32"
#cfunc GetWindowLong "GetWindowLongA" int, int
#func SetWindowLong "SetWindowLongA" int, int, int
#define GWL_STYLE	$FFFFFFF0
#define GWL_EXSTYLE -20
#define WS_EX_TOOLWINDOW	0x0080

#define ctype RGB(%1,%2,%3) (%1 | %2 << 8 | %3 << 16)

#define margin 3
#define default_w 256
#define default_h 192
#define max_w 500
#define max_h 500

#modinit str _fname

	sdim memo,0xFFFFFF
	
	// 空ファイルの生成
	if _fname == ""{
		fname = strf("%s/%04d%02d%02d%02d%02d%02d%02d.memo",DATA_FOLDER,gettime(0),gettime(1),gettime(3),gettime(4),gettime(5),gettime(6),gettime(7))
		temp = ""
		notesel temp
		notesave fname
		noteunsel
		isPin = 1
	}else{
		// ロード
		fname = _fname
		notesel notedata
		noteload fname
		noteget temp,0
		split temp,",",x,y,w,h,col,isPin
		repeat noteinfo(0)-1,1
			if noteinfo(0)-1 < 0:break
			noteget temp,cnt
			if cnt != 1:memo += "\n"
			memo += temp
		loop
		noteunsel
	}

	// 初期化
	x = int(x)
	y = int(y)
	w = int(w)
	h = int(h)
	isPin = int(isPin)
	wid = ginfo_newid

	// 最低値
	if w < default_w:w = default_w
	if h < default_h:h = default_h
	if w > max_w:w = max_w
	if h > max_h:h = max_h

	// ウィンドウの生成
	bgscr wid,ginfo(20),ginfo(21),2,x,y
	width w,h

	// ピンの設定
	setPin thismod

	// 色の設定
	if col == "":col = "black"
	colorsetting thismod

	// コマンドの登録
	title "desktop memo"
	SetWindowLong hWnd, GWL_EXSTYLE, GetWindowLong(hWnd, GWL_EXSTYLE) | WS_EX_TOOLWINDOW
	oncmd gosub *onWindowClick@,0x0201
	oncmd gosub *onWindowResize@,0x00005

	// メッセージボックスの登録
	setMesbox thismod

	// ボタンイメージの生成
	createButtonImage thismod

	// ボタンの設置
	setButton thismod

	// 表示
	gsel wid
	oncmd gosub *ctrlEdit@, 0x133
	
	return

// デストラクタ
#modfunc _exit_ onexit
#modterm
	DeleteObject hBrush
	buffer wid,1,1,2
	return

// メッセージボックスの登録
#modfunc setMesbox
	sel = ginfo_sel
	gsel wid

	// ブラシの初期化
	if hBrush != 0{
		DeleteObject hBrush
	}

	// 背景色など
	gsel wid
	color decRGB(get_WindowColor(thismod)):boxf

	// boxの設置
	objmode 2,0
	font BOX_FONT,FONT_SIZE,FONT_OPTION
	pos margin,32+margin
	mesbox memo,ginfo_winx-2*margin,ginfo_winy-32-2*margin,1,get_WindowBkColor(thismod)
	boxid = stat
	hMesbox = objinfo(stat,2)
	ShowScrollBar hMesbox,3,0
	SetWindowLong hMesbox,-20,0x0
	SetWindowPos hMesbox,0,0,0,0,0,0x27
	CreateSolidBrush hexBGR(get_WindowBkColor(thismod))
	hBrush = stat

	await

	SetWindowPos hMesbox,0,0,0,0,0,0x27
	sendmsg hMesbox,0x00B9
	redraw 1
	objsel boxid

	gsel sel
	return

// ボタンの設置、更新
#modfunc setButton
	sel = ginfo_sel

	// ボタン
	gsel wid
	objsize 32,32
	if btnid_add != 0:clrobj btnid_add
	if btnid_pin != 0:clrobj btnid_pin
	if btnid_col != 0:clrobj btnid_col
	if btnid_del != 0:clrobj btnid_del
	y = 32*3*0:objimage btnid,0,y+32*0,0,y+32*1,0,y+32*2:pos 32*0,0:button gosub "",*newWindow@:btnid_add = stat
	y = 32*3*1:objimage btnid,0,y+32*0,0,y+32*1,0,y+32*2:pos 32*1,0:button gosub "",*onClickWindowPin@:btnid_pin = stat
	y = 32*3*2:objimage btnid,0,y+32*0,0,y+32*1,0,y+32*2:pos 32*2,0:button gosub "",*showColorPallet@:btnid_col = stat
	y = 32*3*3:objimage btnid,0,y+32*0,0,y+32*1,0,y+32*2:pos ginfo_winx-32,0:button gosub "",*delWindow@:btnid_del = stat

	gsel sel
	
	return

// ピンのトグル
#modfunc pinToggle
	isPin = isPin == 0
	setPin thismod
	createButtonImage thismod
	setButton thismod
	onChange thismod
	return

// ピンの処理
#modfunc setPin
	if isPin == 0:gsel wid,1
	if isPin == 1:gsel wid,2
	return

// ボタンイメージの生成
#modfunc createButtonImage
	btnid = ginfo_newid
	buffer btnid,32,32*3*4
	color decRGB(get_WindowColor(thismod)):boxf
	if isPin:color decRGB(get_WindowBkColor(thismod)):boxf 0,32*3*1,32,32*3*2-1
	gmode 7,32,32*3*4
	pos 0,0
	gcopy btnimage
	return

// 情報が更新された（保存を行う）
#modfunc onChange
	sel = ginfo_sel
	gsel wid
	options = ""
	options += str(ginfo_wx1) + ","
	options += str(ginfo_wy1) + ","
	options += str(ginfo_winx) + ","
	options += str(ginfo_winy) + ","
	options += str(col) + ","
	options += str(isPin) + "\n"
	temp = options + str(memo)
	notesel temp
	notesave fname
	noteunsel
	gsel sel
	return

// テーマカラーの値を設定する
#modfunc colorsetting
	col_theme = color_theme(col)
	col_text  = color_text(col)
	col_bk    = color_background(col)
	return

// テーマカラーの変更
#modfunc set_themecolor str _col
	// 色
	col = _col
	colorsetting thismod

	// 保存
	onChange thismod

	// 初期化
	sel = ginfo_sel
	gsel wid
	clrobj

	// エディットコントロール
	setMesbox thismod
	
	// ボタンの更新
	createButtonImage thismod
	setButton thismod
	
	gsel sel
	return

// ゲッター
#modcfunc get_WindowColor
	return col_theme
#modcfunc get_WindowTextColor
	return col_text
#modcfunc get_WindowBkColor
	return col_bk
#modcfunc get_hMesbox
	return hMesbox
#modcfunc get_hBrush
	return hBrush
#modcfunc get_wid
	return wid
#modcfunc get_boxid
	return boxid
#modcfunc get_btnid_pin
	return btnid_pin
#modcfunc get_btnid_col
	return btnid_col
#modcfunc get_btnid_del
	return btnid_del
#modcfunc get_fname
	return fname

#global

// モジュール内に書くとランタイムエラーとかになるので...
goto *module_memo

// ダミー
*dummy
	return

// テーマカラーを変更する
*changeTheme
	s = stat
	
	// ウィンドウ閉じる
	sel = ginfo_sel
	gsel wincol,-1
	gsel sel

	// 色
	col = ""
	if stat == btn_col_white:col = "white"
	if stat == btn_col_black:col = "black"
	if stat == btn_col_red:col = "red"
	if stat == btn_col_blue:col = "blue"
	if stat == btn_col_green:col = "green"
	if stat == btn_col_purple:col = "purple"
	if col == "":return

	// テーマカラーの変更
	foreach window
		if selectwin == get_wid(window(cnt)){
			set_themecolor window(cnt),col
			break
		}
	loop

	return

// カラーパレットを出現させる
*showColorPallet
	if ginfo(2) == -1:return
	sel = ginfo_sel
	gsel ginfo(2)
	selectwin = ginfo_sel
	x = ginfo_wx1+12
	y = ginfo_wy1+32
	gsel wincol
	width ginfo_winx,ginfo_winy,x,y
	gsel wincol,2
	gsel sel
	return

// ピンをクリック
*onClickWindowPin
	foreach window
		if ginfo(2) == get_wid(window(cnt)) {
			pinToggle window(cnt)
			break
		}
	loop
	return

// ウィンドウの削除
*delWindow
	foreach window
		if ginfo(2) == get_wid(window(cnt)) {
			gsel get_wid(window(cnt)),-1
			delete get_fname(window(cnt))
			break
		}
	loop
	return

// ウィンドウの追加
*newWindow
	newmod window,modMemo,""
	return

// ウィンドウのリサイズ
*onWindowResize
	foreach window
		if ginfo(2) == get_wid(window(cnt)) {
			gsel ginfo(2),0
			size = ginfo_winx-2*margin,ginfo_winy-32-2*margin,0,0
			resizeobj get_boxid(window(cnt)),size,1
			onChange window(cnt)
			break
		}
	loop
	return

// ウィンドウのクリック
*onWindowClick
	foreach window
		if ginfo(2) == get_wid(window(cnt)) {
			gsel ginfo(2),0
			sendmsg hwnd,0x00A1,2,0
			onChange window(cnt)
			break
		}
	loop
	return

// エディットコントロールの処理（主に色のための処理）
*ctrlEdit
	await 1
	hBrush = 0
	foreach window
		if get_hMesbox(window(cnt)) == lparam {
			sel = ginfo_sel
			gsel ginfo_intid
			textColor = get_WindowTextColor(window(cnt))
			bkColor   = hexBGR(get_WindowBkColor(window(cnt)))
			hBrush    = get_hBrush(window(cnt))
			SetTextColor wparam, textColor
			SetBkColor wparam, bkColor
			onChange window(cnt)
			gsel sel
			break
		}
	loop
	return hBrush


*module_memo
